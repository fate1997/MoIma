from rdkit import Chem
from typing import Callable, List, Dict
import numpy as np


Bond = Chem.rdchem.Bond
BondFeaturesGenerator = Callable[[Bond], np.ndarray]

BOND_FEATURES_GENERATOR_REGISTRY = {}


class BondFeaturizer:
    def __init__(self, 
                 generator_name_list: List[str], 
                 params: Dict[str, dict]={}):
        self.generator_name_list = generator_name_list
        self.params = params  
    
    @property
    def available_features(self):
        return get_avail_bond_features()
    
    def __call__(self, bond: Bond) -> np.ndarray:
        bond_features = []
        for name in self.generator_name_list:
            if name not in self.available_features:
                raise ValueError(f'Features generator "{name}" could not be found.')
            if name in self.params:
                bond_features += get_bond_features_generator(name)(bond, **self.params[name])
            else:
                bond_features += get_bond_features_generator(name)(bond)
        return np.array(bond_features)
    
    def __repr__(self):
        return f'{self.__class__.__name__}({self.generator_name_list})'


def register_bond_features_generator(features_generator_name: str) \
                                    -> Callable[[BondFeaturesGenerator], BondFeaturesGenerator]:
    r"""Decorates a function as a feature generator and registers it in global 
        dictionaries to enable access by name.
    
    Args:
        features_generator_name (str): The name to use to access the features 
            generator.
    
    Returns:
        Callable[[BondFeaturesGenerator], BondFeaturesGenerator]: A decorator 
            which will add a bond features generator to the registry using the 
            specified name.
    """
    def decorator(features_generator: BondFeaturesGenerator) -> BondFeaturesGenerator:
        BOND_FEATURES_GENERATOR_REGISTRY[features_generator_name] = features_generator
        return features_generator
    
    return decorator


def get_bond_features_generator(features_generator_name: str) -> BondFeaturesGenerator:
    r"""Gets a registered features generator by name."""
    if features_generator_name not in BOND_FEATURES_GENERATOR_REGISTRY:
        raise ValueError(f'Features generator "{features_generator_name}" could not be found.')
    
    return BOND_FEATURES_GENERATOR_REGISTRY[features_generator_name]


def get_avail_bond_features() -> list:
    r"""Returns a list of names of available features generators."""
    return list(BOND_FEATURES_GENERATOR_REGISTRY.keys())


@register_bond_features_generator('bond_type')
def bond_type(bond: Bond) -> list:
    r"""Generates a one-hot encoding of the bond type."""
    # bond type one-hot encoding
    bond_type = bond.GetBondType()
    bond_type_one_hot_encoding = [
        int(bond_type == Chem.rdchem.BondType.SINGLE),
        int(bond_type == Chem.rdchem.BondType.DOUBLE),
        int(bond_type == Chem.rdchem.BondType.TRIPLE),
        int(bond_type == Chem.rdchem.BondType.AROMATIC)
    ]
    return bond_type_one_hot_encoding


@register_bond_features_generator('bond_is_conjugated')
def bond_is_conjugated(bond: Bond) -> np.ndarray:
    r"""Generates a one-hot encoding of whether the bond is conjugated."""
    return [int(bond.GetIsConjugated())]


@register_bond_features_generator('bond_is_in_ring')
def bond_is_in_ring(bond: Bond) -> np.ndarray:
    r"""Generates a one-hot encoding of whether the bond is in a ring."""
    return [int(bond.IsInRing())]


def bond_features_union(bond: Bond,
                        generator_name_list: List,
                        params: Dict[str, dict]) -> np.ndarray:
    r"""Generates the union of the features generated by the specified
        generators.
    
    Args:
        bond (Bond): The bond to generate features for.
        generator_name_list (List): The list of generator names to use.
        params (Dict[str, dict]): The parameters for the generators.
    
    Returns:
        np.ndarray: The union of the features generated by the specified 
            generators.
    """
    bond_features = []
    for generator_name in generator_name_list:
        if generator_name in get_avail_bond_features():
            if generator_name in params:
                bond_features += get_bond_features_generator(generator_name)(bond, **params[generator_name])
            else:
                bond_features += get_bond_features_generator(generator_name)(bond)
        else:
            raise KeyError(f'The generator {generator_name} is not in the generator list')